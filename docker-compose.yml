services:
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    # Don't expose backend ports to host - only accessible within Docker network
    environment:
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=INFO
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=alphas_db
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - SERVER_HOST=${SERVER_HOST:-localhost}  # Default to localhost if not set
    volumes:
      - static_files:/app/static
    networks:
      # Custom internal network for backend communication only
      internal-network:
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=alphas_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      internal-network:
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:1.25.3-alpine
    environment:
      - SERVER_HOST=${SERVER_HOST:-localhost}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./frontend:/usr/share/nginx/html
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - static_files:/usr/share/nginx/html/static
    depends_on:
      - backend
    networks:
      # External network for client access
      - external-network
      # Internal network for backend access
      - internal-network

networks:
  # Network for external connections (client to nginx)
  external-network:
    driver: bridge
  # Network for internal services (nginx to backend, backend to postgres)
  internal-network:
    driver: bridge

volumes:
  postgres_data:
  static_files:
